<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>//localhost:1313/en/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Oct 2024 14:24:01 +0100</lastBuildDate>
    <atom:link href="//localhost:1313/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning Go: POV of a JavaScript Developer PT. 2</title>
      <link>//localhost:1313/en/posts/more-on-go-2024-10-10/</link>
      <pubDate>Thu, 10 Oct 2024 14:24:01 +0100</pubDate>
      <guid>//localhost:1313/en/posts/more-on-go-2024-10-10/</guid>
      <description>&lt;h2 id=&#34;variable-declaration&#34;&gt;Variable declaration&lt;/h2&gt;&#xA;&lt;p&gt;variable declaration is straight forward in Go.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;varName&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If a variable is declared without an initial value, Go automatically assigns it a default value based on its type. Additionally, there is a shorthand declaration and assignment syntax that uses &lt;code&gt;:=&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firstName&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// correct&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lastName&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Salako&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// correct&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// correct&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;role&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Backend Developer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// correct&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This will cause an error because it&amp;#39;s outside of a function.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// alias := &amp;#34;plutack&amp;#34; // wrong&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;realAlias&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plutack&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// correct&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The shorthand form automatically assigns the &lt;code&gt;var&lt;/code&gt; keyword to the declared variable with its type inferred. It is also worth noting the shorthand syntax cannot be used outside a function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Go: POV of a JavaScript Developer PT. 1</title>
      <link>//localhost:1313/en/posts/intro-to-go/</link>
      <pubDate>Wed, 25 Sep 2024 18:42:50 +0100</pubDate>
      <guid>//localhost:1313/en/posts/intro-to-go/</guid>
      <description>&lt;p&gt;As someone whose first programming language is dynamically typed, it only made sense to explore what the other side of the coin looks like. So, I started looking for a statically-typed language to learn. I already appreciated TypeScript, although some would argue it&amp;rsquo;s more like a linter, so that was a natural stepping stone. In my search, I came across several choices like classic Java, C, OCaml, Go, and a few others.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Frontpages: Your Daily Dose of News in One Place</title>
      <link>//localhost:1313/en/posts/frontpages/</link>
      <pubDate>Sun, 22 Sep 2024 13:17:08 +0100</pubDate>
      <guid>//localhost:1313/en/posts/frontpages/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://frontpages.talut.tech&#34;&gt;Frontpages&lt;/a&gt; is a simple web app that collects the front pages of popular newspapers in Nigeria, extracts the headlines, and cites articles and sources discussing those headlines. Itâ€™s designed to make it easier for you to stay informed without the hassle of jumping between multiple news sites.&lt;/p&gt;&#xA;&lt;h4 id=&#34;built-with&#34;&gt;Built With:&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hono&lt;/strong&gt; - server&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; - database&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Mongoose&lt;/strong&gt; - ORM for database interaction&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Using Hono was a refreshing experience compared to Express, which I was already familiar with. I loved the straightforward context object that houses the request and response objects, along with handy shortcuts like &lt;code&gt;ctx.json(responseObject)&lt;/code&gt; to send responses.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My Very First Project: Building Something I Needed</title>
      <link>//localhost:1313/en/posts/building-something-i-needed/</link>
      <pubDate>Sun, 23 Jun 2024 10:27:08 +0100</pubDate>
      <guid>//localhost:1313/en/posts/building-something-i-needed/</guid>
      <description>&lt;p&gt;As a beginner software developer looking to break into the workforce, one of the common questions I face is: what kind of project should I build to showcase my skills? One of the more popular replies is along the lines of &amp;ldquo;Build something you can use&amp;rdquo; or &amp;ldquo;Build something that solves a problem for yourself.&amp;rdquo; This advice can be frustrating for me because I find it difficult to come up with ideas. I see myself as a soldier, a very good one, the kind you point at a problem and get good results delivered. So, coming up with a project that I would find useful was always going to be tricky.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Talut Salako</title>
      <link>//localhost:1313/en/talut-salako/</link>
      <pubDate>Sat, 22 Jun 2024 10:01:53 +0100</pubDate>
      <guid>//localhost:1313/en/talut-salako/</guid>
      <description>&lt;p&gt;Hello! My name is Talut Salako, and I am an aspiring backend Node.js developer with a deep passion for backend technology. When I&amp;rsquo;m not immersed in coding, I enjoy playing games, and I also have a keen interest in progressive fantasy novels. There&amp;rsquo;s something incredibly captivating about the journey of advancing and becoming stronger that really resonates with me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My Very First Post</title>
      <link>//localhost:1313/en/posts/post-1/</link>
      <pubDate>Sat, 22 Jun 2024 09:50:16 +0100</pubDate>
      <guid>//localhost:1313/en/posts/post-1/</guid>
      <description>&lt;h1 id=&#34;setting-up-hugo-on-github-pages&#34;&gt;Setting Up Hugo on Github pages&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
