<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Blog</title>
		<link>//localhost:1313/en/posts/</link>
		<description>Recent content in Posts on Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en</language>
		<lastBuildDate>Fri, 18 Oct 2024 09:51:18 +0100</lastBuildDate>
		<atom:link href="//localhost:1313/en/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Creating a Simple Email Sender App</title>
			<link>//localhost:1313/en/posts/creating-a-simple-email-sender-app-2024-10-18/</link>
			<pubDate>Fri, 18 Oct 2024 09:51:18 +0100</pubDate>
			
			<guid>//localhost:1313/en/posts/creating-a-simple-email-sender-app-2024-10-18/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h2 id="a-custom-email-solution-for-a-client-from-mailing-lists-to-wails">A Custom Email Solution for a Client: From Mailing Lists to Wails</h2>
<p>I was recently approached by a client looking to send the same email to multiple recipients. My first thought was to set up a mailing list, which seemed like the obvious solution. However, the client insisted this would not be a frequent exercise, with only around 50 intended recipients. Since my client was not very technically inclined, setting up a mailing list was quickly ruled out. Not only would it involve a recurring cost (even when not in use), but it might also be too complex for the client to manage.</p>
<h2 id="exploring-alternatives-from-scripting-to-hosting">Exploring Alternatives: From Scripting to Hosting</h2>
<p>As a JavaScript developer, I initially thought it wouldn’t be difficult to solve this problem with a custom script. In the past, I had worked on a project where I sent customized emails based on user data. This solution even involved sending unique messages via the Gemini API. However, this approach quickly became impractical because it would require the client to have basic knowledge of running scripts from a terminal, which was unrealistic.</p>
<p>I then considered hosting the solution on the web. While that seemed like a workable approach, it added unnecessary complexity. I’d have to deal with setting up a domain and finding a free or paid hosting service. Another thought was to spin up a Docker container that auto-started on the client’s system whenever it was turned on. But again, Docker would introduce extra abstractions and complications for someone who wasn’t technically savvy.</p>
<h2 id="the-move-to-compiled-languages-and-gui-considerations">The Move to Compiled Languages and GUI Considerations</h2>
<p>Next, I thought about using a compiled language to create a single binary file that the client could run easily. However, this plan originally involved building a Command-Line Interface (CLI), which wouldn’t work for this particular user. A Terminal User Interface (TUI) was clearly not the right solution either. I then turned my attention to building a Graphical User Interface (GUI).</p>
<p>One of the first things I built during my coding journey was a Python GUI with Tkinter. While it functioned, the overall experience and the interface design left a lot to be desired—likely due to my limited experience at the time. I wanted to find a balance between creating a user-friendly tool and keeping the development process simple for myself.</p>
<h2 id="enter-wails-a-balanced-solution">Enter Wails: A Balanced Solution</h2>
<p>In my search, I came across Wails, which seemed like the perfect solution. Wails allows you to use JavaScript to design the frontend while writing the backend functionality in Go. It handles the necessary bindings between the frontend and backend for smooth interaction. Since I was already learning Go and was very familiar with JavaScript, this seemed like an excellent fit. Creating a simple frontend to handle data input would be easy, and it gave me an opportunity to refine my Go skills.</p>
<p>The benefits didn’t stop there. Unlike my experience with Python GUIs, I could now create a polished, simple-looking interface. Compared to Electron-based GUIs (which bundle Chromium or V8 and result in huge executables), Wails would give me a lightweight solution. A Wails app ships with the Go runtime, ensuring a single, small executable—much smaller than an Electron app, which was important for such a simple task.</p>
<h2 id="how-the-application-works">How the Application Works</h2>
<p>The solution I developed uses the <code>gomail.v2</code> package with SMTP over TLS to send emails securely. On the frontend, the user inputs their email address and an app-specific password, which they generate after enabling two-factor authentication (2FA). This ensures secure communication with their email provider.</p>
<p>For the message body, the user can either type it directly into the application or import it from a <code>.txt</code> file. Similarly, recipient details can be entered manually or imported from a <code>.csv</code> or <code>.xlsx</code> file. The frontend ensures the validity of these files, checking for necessary fields like <code>firstname</code>, <code>lastname</code>, and <code>email address</code>. For each recipient, the email will be personalized with a greeting like: <strong>&ldquo;Dear Firstname Lastname&rdquo;</strong>, making the emails feel more personal.</p>
<h3 id="real-time-feedback-and-logging">Real-Time Feedback and Logging</h3>
<p>A logging section is built into the application to provide the user with real-time progress updates. Logs from the backend are sent to the frontend and displayed in a&quot;show logs screen&quot; with key milestone events highlighted using a ShadCN toast component. This ensures the user is informed about the progress of the email-sending process and any issues that may arise, offering a user-friendly experience with clear feedback.</p>
<h4 id="application-interface-overview">Application Interface Overview</h4>
<p>To give you a clearer picture, here&rsquo;s a visual representation of the application interface:

<figure class="big" ><picture>
          <source srcset="/images/email-sender_hu4217863900952434602.webp" type="image/webp">
          <source srcset="/images/email-sender_hu5694349923078585541.jpg" type="image/jpeg">
          <img src="/images/email-sender_hu4217863900952434602.webp"alt="image"  width="1920"  height="1080" />
        </picture><figcaption>
            <p>Email Sender UI</p>
          </figcaption></figure></p>
<h2 id="final-product-and-cross-platform-support">Final Product and Cross-Platform Support</h2>
<p>The end result was a lightweight 10MB Windows executable that the client could easily run without any further guidance. One of the key features was the ability to compile the same codebase for both Linux and macOS, ensuring flexibility for future needs.</p>
<p>By using Wails and Go, the compilation process was straightforward and well-supported for cross-platform builds, allowing for minimal overhead in delivering a truly universal solution. This also meant that as the project scaled or the client’s requirements evolved, they wouldn’t be tied to a single operating system—an important advantage for businesses today.</p>
<h3 id="resources">Resources:</h3>
<ul>
<li><a href="https://github.com/plutack/Birthday-Reminder">Simple nodeJS birthday reminder app using Gemini API</a></li>
<li><a href="https://github.com/plutack/email-sender">Email sender github repo</a></li>
<li><a href="https://www.youtube.com/watch?v=13Ufa9i8cFo&t=115s">Creator of Wails video: Building Desktop Applications using Wails</a></li>
<li><a href="https://wails.io/docs/introduction">Wails documentation</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Learning Go: POV of a JavaScript Developer PT. 2</title>
			<link>//localhost:1313/en/posts/more-on-go-2024-10-10/</link>
			<pubDate>Thu, 10 Oct 2024 14:24:01 +0100</pubDate>
			
			<guid>//localhost:1313/en/posts/more-on-go-2024-10-10/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h2 id="variable-declaration">Variable declaration</h2>
<p>variable declaration is straight forward in Go.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">varName</span> <span style="color:#66d9ef">type</span>
</span></span></code></pre></div><p>If a variable is declared without an initial value, Go automatically assigns it a default value based on its type. Additionally, there is a shorthand declaration and assignment syntax that uses <code>:=</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">firstName</span> <span style="color:#66d9ef">string</span> <span style="color:#75715e">// correct
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">lastName</span> = <span style="color:#e6db74">&#34;Salako&#34;</span> <span style="color:#75715e">// correct
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">age</span> = <span style="color:#ae81ff">16</span> <span style="color:#75715e">// correct
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">role</span> <span style="color:#66d9ef">string</span> = <span style="color:#e6db74">&#34;Backend Developer&#34;</span> <span style="color:#75715e">// correct
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// This will cause an error because it&#39;s outside of a function.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// alias := &#34;plutack&#34; // wrong
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">realAlias</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;plutack&#34;</span> <span style="color:#75715e">// correct
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>The shorthand form automatically assigns the <code>var</code> keyword to the declared variable with its type inferred. It is also worth noting the shorthand syntax cannot be used outside a function.</p>
<h3 id="function-declaration-in-go">Function Declaration in Go</h3>
<p>The syntax for declaring a function in Go differs significantly from JavaScript, primarily in its use of types and the absence of curly braces for defining function parameters.
The basic syntax for declaring a function in Go is as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">functionName</span>(<span style="color:#a6e22e">parameter1</span> <span style="color:#a6e22e">type1</span>, <span style="color:#a6e22e">parameter2</span> <span style="color:#a6e22e">type2</span>) <span style="color:#a6e22e">returnType</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// function body
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h3 id="error-handling-pattern">Error Handling Pattern</h3>
<p>When defining a function that can encounter an error, the typical signature includes an additional return value of type <code>error</code>. By convention, the first return value is usually the desired result, while the second return value is the error, if any. This allows callers of the function to easily check for errors and handle them appropriately.</p>
<p>Here’s a simple example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;errors&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">divide</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">float64</span>) (<span style="color:#66d9ef">float64</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">errors</span>.<span style="color:#a6e22e">New</span>(<span style="color:#e6db74">&#34;division by zero is not allowed&#34;</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">/</span> <span style="color:#a6e22e">b</span>, <span style="color:#66d9ef">nil</span> <span style="color:#75715e">// nil indicates no error
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">result</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">divide</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Error:&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Result:&#34;</span>, <span style="color:#a6e22e">result</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Demonstrating error handling for division by zero
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">result</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">divide</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Error:&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Result:&#34;</span>, <span style="color:#a6e22e">result</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="returning-multiple-values">Returning Multiple Values</h2>
<p>One of the distinctive features of Go is its ability to return multiple values from a function without requiring an object  as is common in JavaScript. This capability enhances the language&rsquo;s flexibility and makes handling different outcomes from a function more straightforward.</p>
<p>In Go, a function can be defined to return multiple types of values. This is useful for scenarios where a function might need to return both a result and an error, or when it produces multiple outputs that can be handled simultaneously.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Function that returns multiple values
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getPostInfo</span>() (<span style="color:#a6e22e">author</span>, <span style="color:#a6e22e">address</span>, <span style="color:#a6e22e">jobTitle</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">address</span> = <span style="color:#e6db74">&#34;https://blog.talut.tech&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">author</span> = <span style="color:#e6db74">&#34;Talut Salako&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">jobTitle</span> = <span style="color:#e6db74">&#34;Backend Engineer&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">myName</span>, <span style="color:#a6e22e">postDomain</span>, <span style="color:#a6e22e">role</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">getPostInfo</span>() <span style="color:#75715e">// Receiving multiple return values
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Name: %s, url: %s, profession: %s\n&#34;</span>, <span style="color:#a6e22e">myName</span>, <span style="color:#a6e22e">postDomain</span>, <span style="color:#a6e22e">role</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="returning-pointers-instead-of-values">Returning Pointers Instead of Values</h3>
<p>In Go, functions can return pointers instead of values, which is a common practice for several reasons. When a function returns a pointer, it provides a reference to the original data instead of a copy, which can have performance benefits and allow for more flexible data manipulation.</p>
<h4 id="why-return-pointers">Why Return Pointers?</h4>
<ol>
<li>
<p><strong>Performance</strong>: When you return a large struct or array by value, a copy of that data is made, which can be inefficient in terms of memory and CPU usage. By returning a pointer, you avoid this overhead, as only the address of the original data is returned.</p>
</li>
<li>
<p><strong>Mutability</strong>: Returning a pointer allows the caller to modify the original data. This is particularly useful in situations where you want to update the state of a struct or when managing resources like slices and maps.</p>
</li>
<li>
<p><strong>Nil Checks</strong>: Pointers can also be used to indicate the absence of a value. A <code>nil</code> pointer can signal that an operation failed or that a particular resource is unavailable, allowing for more explicit error handling.</p>
</li>
</ol>
<p>An implemention of this is  shown in the later part of this post</p>
<h2 id="structs">Structs</h2>
<p>Unlike JavaScript, where the &ldquo;class&rdquo; keyword and its associated concepts exist, Go approaches object-oriented design differently. Here’s an example to illustrate this distinction:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Account</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">constructor</span> (<span style="color:#a6e22e">deposit</span>, <span style="color:#a6e22e">accountType</span>){
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">deposit</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2000</span>){
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#34;Account cannot be created with less than 2000&#34;</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_balance</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">deposit</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">accountType</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;fixedDeposit&#34;</span>){
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">interestRate</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">accountType</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;savings&#34;</span>){
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">interestRate</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// more code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">getBalance</span>(){
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_balance</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">myAccount</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Account</span>(<span style="color:#ae81ff">2000</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">myAccount</span>.<span style="color:#a6e22e">getBalance</span>()) <span style="color:#75715e">//  2000
</span></span></span></code></pre></div><p>In Go , a typical implementation would look like thus;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">account</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;sync&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">lastRegisteredId</span> <span style="color:#66d9ef">int</span> <span style="color:#75715e">// this initializes to 0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">mu</span>               <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">Mutex</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">money</span>   <span style="color:#66d9ef">float64</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Account</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Id</span>           <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Name</span>         <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Balance</span>      <span style="color:#a6e22e">money</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">InterestRate</span> <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">accountType</span>  <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">balance</span> <span style="color:#a6e22e">money</span>, <span style="color:#a6e22e">accountType</span> <span style="color:#66d9ef">string</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">Account</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mu</span>.<span style="color:#a6e22e">Lock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">mu</span>.<span style="color:#a6e22e">Unlock</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">balance</span> &lt; <span style="color:#ae81ff">2000</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;initial balance %.2f is lower than 2000&#34;</span>, <span style="color:#a6e22e">balance</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">interestRate</span> <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">accountType</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;fixedDeposit&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">accountType</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;savings&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;%s is an invalid account type&#34;</span>, <span style="color:#a6e22e">accountType</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">accountType</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;fixedDeposit&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">interestRate</span> = <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">accountType</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;savings&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">interestRate</span> = <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">lastRegisteredId</span><span style="color:#f92672">++</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">newAccount</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Account</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Id</span>:           <span style="color:#a6e22e">lastRegisteredId</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Name</span>:         <span style="color:#a6e22e">name</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Balance</span>:      <span style="color:#a6e22e">balance</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">InterestRate</span>: <span style="color:#a6e22e">interestRate</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">accountType</span>:  <span style="color:#a6e22e">accountType</span>,
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">newAccount</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">a</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Account</span>) <span style="color:#a6e22e">GetBalance</span>() <span style="color:#a6e22e">money</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">Balance</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Notice the distinction?</p>
<h3 id="field-alignment">Field Alignment</h3>
<p>An important concept encountered when defining a struct is <strong>field alignment</strong>. Field alignment is a thing  because different types have varying byte sizes in memory. Depending on the arrangement of your fields in the struct definition, you might use more memory than necessary every time you create a new instance of your struct. Practically, this difference in memory usage is often negligible unless the struct contains a large number of fields.</p>
<h3 id="methods-vs-functions">Methods vs Functions</h3>
<p>Just like in JavaScript, both concepts exist in Go. However, methods are defined on structs, while in JavaScript, methods are defined within classes.</p>
<h3 id="type-aliasing-and-type-definiton">Type aliasing and Type Definiton</h3>
<table>
  <thead>
      <tr>
          <th>Feature</th>
          <th>Type Aliasing</th>
          <th>Type Definition</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Syntax</td>
          <td><code>type NewType = ExistingType</code></td>
          <td><code>type NewType ExistingType</code></td>
      </tr>
      <tr>
          <td>Purpose</td>
          <td>Creates an alias for an existing type.</td>
          <td>Creates a new type based on an existing type.</td>
      </tr>
      <tr>
          <td>Compatibility</td>
          <td>The new type is interchangeable with the existing type.</td>
          <td>The new type is distinct and not interchangeable with the existing type.</td>
      </tr>
      <tr>
          <td>Type Identity</td>
          <td>Both types have the same identity.</td>
          <td>The new type has a different identity.</td>
      </tr>
      <tr>
          <td>Use Cases</td>
          <td>Simplifying long type names or enhancing readability.</td>
          <td>Creating distinct types for better type safety.</td>
      </tr>
      <tr>
          <td>Example</td>
          <td><code>type money = float64</code></td>
          <td><code>type money float64</code></td>
      </tr>
      <tr>
          <td>Type Checking</td>
          <td>No new type; type checks will pass.</td>
          <td>Type checks will fail when trying to use them interchangeably.</td>
      </tr>
      <tr>
          <td>Method Sets</td>
          <td>Same method set as the original type. (e.g., <code>money</code> can now be passed with all methods that can be used with <code>float64</code>).</td>
          <td>Can have a different method set.(i.e., methods need to be user-defined).</td>
      </tr>
      <tr>
          <td></td>
          <td></td>
          <td></td>
      </tr>
  </tbody>
</table>
<h3 id="defer-and-mutex">Defer and Mutex</h3>
<p>Notice the new variable <code>mu</code> and the use of the <code>defer</code> keyword. The <code>defer</code> statement is <strong>similar</strong> to the <code>finally</code> block in JavaScript&rsquo;s <code>try-catch-finally</code>. It ensures that the line of code with the keyword is executed at the end of the function, regardless of how the function terminates. One key thing to know is that defer statements are stacked rather than queued.</p>
<p>The <code>Mutex</code> allows a lock on the global variable <code>lastRegisteredId</code> to ensure consistency in a synchronous manner.</p>
<p>In the next blog post, we will delve deeper into mutex locks, channels, and goroutines, with fewer comparisons to JavaScript as we progress.</p>
<h3 id="link-to-resources">Link to Resources</h3>
<ul>
<li>Article on field alignment: <a href="https://medium.com/@didi12468/golang-field-alignment-2e657e87668a">https://medium.com/@didi12468/golang-field-alignment-2e657e87668a</a></li>
<li>chatGPT tutoring session: <a href="https://chatgpt.com/c/66f2c711-93a8-8008-9e59-987a5ff44906">https://chatgpt.com/c/66f2c711-93a8-8008-9e59-987a5ff44906</a></li>
<li>Queue vs Stack: <a href="www.theknowledgeacademy.com/blog/stack-vs-queue/">www.theknowledgeacademy.com/blog/stack-vs-queue/</a></li>
<li>code repo for this session: <a href="https://github.com/plutack/learning-go">https://github.com/plutack/learning-go</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Learning Go: POV of a JavaScript Developer PT. 1</title>
			<link>//localhost:1313/en/posts/intro-to-go/</link>
			<pubDate>Wed, 25 Sep 2024 18:42:50 +0100</pubDate>
			
			<guid>//localhost:1313/en/posts/intro-to-go/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<p>As someone whose first programming language is dynamically typed, it only made sense to explore what the other side of the coin looks like. So, I started looking for a statically-typed language to learn. I already appreciated TypeScript, although some would argue it&rsquo;s more like a linter, so that was a natural stepping stone. In my search, I came across several choices like classic Java, C, OCaml, Go, and a few others.</p>
<p>Initially, I wanted to settle on Rust—and I did for a while—for a few reasons: Rust is well-known for encouraging memory-safe code, and it seems to be gaining traction lately. An <a href="https://www.whitehouse.gov/oncd/briefing-room/2024/02/26/press-release-technical-report/">article</a> released by the U.S. government hinted at a shift towards using Rust more widely in modern software. As a software engineer looking for opportunities both locally and abroad, I figured Rust developers might be in high demand soon.</p>
<p>However, a few days in, it became clear that I was lacking the background knowledge needed to continue with Rust. After weighing the pros and cons, I decided to switch gears and learn Go instead. Go felt like the perfect balance—offering simplicity while coming from my JavaScript experience.</p>
<p><a href="https://go.dev"><strong>Go</strong></a> is known for its straightforward syntax. It also handles some things, like garbage collection and memory allocation.</p>
<h2 id="why-go">Why Go?</h2>
<p>As a JavaScript developer exploring new languages, I found several reasons why Go stands out, especially as I transition from a dynamically typed language to a statically typed one. Here are some key advantages that resonate with me:</p>
<ol>
<li><strong>Simplicity and Readability</strong></li>
</ol>
<p>Go’s syntax is clean and straightforward, much like JavaScript. This makes it easy for someone like me, who is just starting to learn a new language, to pick it up quickly. The simplicity of Go helps reduce the mental overhead that often comes with learning complex syntax in other languages.</p>
<ol start="2">
<li><strong>Performance</strong></li>
</ol>
<p>Being a compiled language, Go offers impressive performance. While JavaScript runs in a browser or on Node.js, Go compiles to machine code, allowing applications to run faster. This is particularly appealing for building high-performance applications and services and complements a topic I’m currently pondering: &ldquo;what scaling for a large audience looks like,&rdquo; which I’m eager to explore.</p>
<ol start="3">
<li><strong>Single Executable</strong></li>
</ol>
<p>One of the standout features of Go is that it compiles to a single binary executable. Unlike JavaScript, where users need Node.js installed, I can distribute my Go applications without requiring users to install anything extra. This makes deployment much easier, especially for command-line tools or server applications. Building CLI tools is an idea I am most certainly going to explore in the future and Go seems to be the better choice.</p>
<ol start="4">
<li><strong>Cross-Platform Compatibility</strong></li>
</ol>
<p>Go allows you to build applications that run on various operating systems without much hassle. By setting <code>GOOS</code> and <code>GOARCH</code>, I can compile my code for Windows, macOS, or Linux from a single codebase. This flexibility is definitely a big plus.</p>
<ol start="5">
<li><strong>Built-in Concurrency</strong></li>
</ol>
<p>As someone who has primarily worked with JavaScript’s asynchronous programming model, Go’s approach promises a better way to handle concurrency with goroutines and channels to write concurrent code, allowing for efficient task management.</p>
<ol start="6">
<li><strong>Strong Standard Library</strong></li>
</ol>
<p>Go has a robust standard library that provides a wide range of functionalities, including HTTP handling, file manipulation, and more—similar to Node.js built-in modules, but arguably more powerful. This means I can accomplish many tasks without relying heavily on external libraries, much like how I sometimes use Node.js core modules.</p>
<ol start="7">
<li><strong>Strong Typing and Error Handling</strong></li>
</ol>
<p>Transitioning from JavaScript’s dynamic typing to Go’s static typing is a significant shift. However, I’ve seen how leveraging compile-time error catching in TypeScript can lead to more robust and reliable code, while also saving development time by reducing debugging efforts. Go’s explicit error handling introduces a new approach, leading me to explore the &ldquo;errors as values vs exceptions&rdquo; debate, and I’m eager to see which approach resonates with me more.</p>
<h2 id="setting-up-go">Setting Up Go</h2>
<p>Go has extensive setup guides for different systems on its website. As an Arch Linux user (btw 😎), installing Go was pretty simple since it’s available in the Arch Extra repository:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>paru -S go 
</span></span></code></pre></div><p>In VS Code, I also installed the Go extension to work smoothly with the binary downloaded earlier. Although I plan to switch to the Neovim + Tmux combo in the future (more on that later).</p>
<h2 id="the-usual-ritual">The Usual Ritual</h2>
<p>As is customary when learning a new language, I had to perform the ritual of printing the first &ldquo;Hello, World!&quot;—though I tend to default to &lsquo;Foo Bar&rsquo; now. Here&rsquo;s how I did it:</p>
<ul>
<li>First, I created a directory:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>mkdir -p go/test
</span></span></code></pre></div><ul>
<li>Then, I navigated to the newly created directory:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cd go/test
</span></span></code></pre></div><ul>
<li>I opened the directory in VS Code:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>code .
</span></span></code></pre></div><ul>
<li>Next, I initialized a Go module (similar to package.json in Node.js):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>go mod init
</span></span></code></pre></div><ul>
<li>I created a Go file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>touch main.go
</span></span></code></pre></div><ul>
<li>Then, I wrote my first bit of Go code:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>(){
</span></span><span style="display:flex;"><span>	println(<span style="color:#e6db74">&#34;FOO BAR&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Finally, I ran the code:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>go run .
</span></span></code></pre></div><p><strong>Note:</strong> Go looks for an entry file that satisfies three conditions:</p>
<ol>
<li>The file has a <code>.go</code> extension.</li>
<li>It starts with the statement <code>package main</code>.</li>
<li>It declares a <code>main()</code> function.</li>
</ol>
<h2 id="whats-next">What’s Next?</h2>
<p>In the upcoming posts, I will be delving into the fundamentals of Go and highlighting contrasts with JavaScript, such as:</p>
<ul>
<li><strong>Variable Declaration &amp; Assignment</strong>: How Go handles variables and types.</li>
<li><strong>Pointers</strong>: Go’s approach to pointers and memory management.</li>
<li><strong>Functions</strong>: Writing reusable functions, passing arguments, and returning values.</li>
<li><strong>Go Routines</strong>: A sneak peek into Go’s concurrency model.</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Frontpages: Your Daily Dose of News in One Place</title>
			<link>//localhost:1313/en/posts/frontpages/</link>
			<pubDate>Sun, 22 Sep 2024 13:17:08 +0100</pubDate>
			
			<guid>//localhost:1313/en/posts/frontpages/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<p><a href="https://frontpages.talut.tech">Frontpages</a> is a simple web app that collects the front pages of popular newspapers in Nigeria, extracts the headlines, and cites articles and sources discussing those headlines. It’s designed to make it easier for you to stay informed without the hassle of jumping between multiple news sites.</p>
<h4 id="built-with">Built With:</h4>
<ul>
<li><strong>Hono</strong> - server</li>
<li><strong>MongoDB</strong> - database</li>
<li><strong>Mongoose</strong> - ORM for database interaction</li>
</ul>
<p>Using Hono was a refreshing experience compared to Express, which I was already familiar with. I loved the straightforward context object that houses the request and response objects, along with handy shortcuts like <code>ctx.json(responseObject)</code> to send responses.</p>
<p>Here’s a quick comparison of syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#75715e">// express syntax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/&#34;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">someParam</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">param</span>(<span style="color:#e6db74">&#34;someParam&#34;</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>({<span style="color:#e6db74">&#34;foo&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;bar&#34;</span>})
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// hono syntax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#66d9ef">async</span>(<span style="color:#a6e22e">c</span>) =&gt; {
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">someParam</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">someParam</span><span style="color:#e6db74">&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">   return c.json({&#34;</span><span style="color:#a6e22e">foo</span><span style="color:#e6db74">&#34;: &#34;</span><span style="color:#a6e22e">bar</span><span style="color:#960050;background-color:#1e0010">&#34;</span>})
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>I also think using middleware in Hono is syntactically cleaner!</p>
<h4 id="a-peek-behind-the-scenes">A Peek Behind the Scenes</h4>
<p>Here’s a simple flowchart illustrating the logic that goes on under the hood:</p>
<pre class="mermaid">
flowchart TD
    A["Cron Job Starts at 9 AM"] --> B["Loop Through Each Newspaper"]
    B --> C["Get Newspaper URL and Upload Image"]
    C --> D["Convert Image to Base64 & Calculate Hash"]
    D --> E["Analyze Image Using LLM"]
    E -- If Success --> F["Save Newspaper Data"]
    F --> G["Perform Google Search for Headlines"] & I["Check If Newspaper Already Exists"]
    G --> H["Store Headline Search Results in Database"]
    I -- If Exists --> J["Compare Hash and Update If Needed"]
    I -- If New --> K["Create New Newspaper Entry"]
    J --> L["Update Existing Entry in Database"]
    K --> M["Save New Entry to Database"]
    L --> N["Save or Update Search Results"]
    M --> N
    N --> O["End of Newspaper Process"]
    O -- If All Newspapers Processed --> P["Cron Job Complete"]
</pre>
<p>For the LLM function, I initially thought about using ChatGPT because it outputs JSON directly. Unfortunately, I couldn&rsquo;t go that route due to the steep costs of the API. Instead, I opted for Google Gemini Flash, which is free—thank you, Google! The trade-off in this use case is that it doesn’t provide a direct JSON output. While Google allows you to define a schema for the response, the output still comes as plain text, requiring some extra parsing. Although the responses have been consistent, it still feels a bit off.</p>
<p>Here’s an example of how I set up the response schema:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">GoogleGenerativeAI</span>, <span style="color:#a6e22e">SchemaType</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;@google/generative-ai&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">genAI</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">GoogleGenerativeAI</span>(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">GEMINI_API_KEY</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">schema</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">description</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;api response&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">SchemaType</span>.<span style="color:#a6e22e">OBJECT</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">properties</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">SchemaType</span>.<span style="color:#a6e22e">BOOLEAN</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">description</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Success of prompt in parsing input image.&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">nullable</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>      },
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">result</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">SchemaType</span>.<span style="color:#a6e22e">ARRAY</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">items</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">SchemaType</span>.<span style="color:#a6e22e">OBJECT</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">properties</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">headline</span><span style="color:#f92672">:</span>{
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">SchemaType</span>.<span style="color:#a6e22e">STRING</span>,
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">description</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Headline as extracted in image.&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">nullable</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">search_query</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">SchemaType</span>.<span style="color:#a6e22e">STRING</span>,
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">description</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;search query to use with google search api to get related news article.&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">nullable</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">tag</span><span style="color:#f92672">:</span>{
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">SchemaType</span>.<span style="color:#a6e22e">ARRAY</span>,
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">items</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">SchemaType</span>.<span style="color:#a6e22e">STRING</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">description</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Tags to select from as supplied in prompt.&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">nullable</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>              },
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">nullable</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">nullable</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      },
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">error</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">SchemaType</span>.<span style="color:#a6e22e">STRING</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">description</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Error message as supplied in prompt.&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">nullable</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">model</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">genAI</span>.<span style="color:#a6e22e">getGenerativeModel</span>({ <span style="color:#a6e22e">model</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;gemini-1.5-flash&#34;</span> , <span style="color:#a6e22e">generationConfig</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">responseMimeType</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;application/json&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">responseSchema</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">schema</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>}, );
</span></span><span style="display:flex;"><span><span style="color:#75715e">// ... unneccessary code ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">model</span>.<span style="color:#a6e22e">generateContent</span>([<span style="color:#a6e22e">prompt</span>,
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">inlineData</span><span style="color:#f92672">:</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">mimeType</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;image/png&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">dataUrlString</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>  ]);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">response</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">cleanResponse</span>(<span style="color:#66d9ef">await</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">text</span>()))
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">response</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// ... more unneccessary code ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  
</span></span></code></pre></div><p>For fetching related articles citing specific headlines, I rely on Google Custom Search. However, there’s a limit of 100 queries per day, so I have to manage my requests carefully.</p>
<h3 id="future-improvements">Future Improvements</h3>
<p>While I’m thrilled with how Frontpages has turned out so far, there are always opportunities for improvement! Here are a few ideas I’m considering:</p>
<ol>
<li><strong>Enhanced User Interface</strong>: Making the app more visually appealing and user-friendly to improve the overall experience.</li>
<li><strong>Real-time Updates</strong>: Implementing WebSocket support to provide users with real-time updates on news headlines.</li>
<li><strong>Personalized News Feeds</strong>: Allowing users to customize their news feeds based on their interests or preferred sources.</li>
<li><strong>Offline Access</strong>: Adding a feature to allow users to save articles for offline reading.</li>
<li><strong>AI-Powered Summaries</strong>: Leveraging AI to generate concise summaries of the headlines for quicker consumption.</li>
</ol>
<p>I’m excited about the journey ahead and can’t wait to see how Frontpages evolves. Stay tuned for more updates!</p>
<p>Link to Repo:</p>
<ul>
<li><a href="https://github.com/plutack/frontpages-backend">backend</a></li>
<li><a href="https://github.com/plutack/frontpages-frontend">frontend</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>My Very First Project: Building Something I Needed</title>
			<link>//localhost:1313/en/posts/building-something-i-needed/</link>
			<pubDate>Sun, 23 Jun 2024 10:27:08 +0100</pubDate>
			
			<guid>//localhost:1313/en/posts/building-something-i-needed/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<p>As a beginner software developer looking to break into the workforce, one of the common questions I face is: what kind of project should I build to showcase my skills? One of the more popular replies is along the lines of &ldquo;Build something you can use&rdquo; or &ldquo;Build something that solves a problem for yourself.&rdquo; This advice can be frustrating for me because I find it difficult to come up with ideas. I see myself as a soldier, a very good one, the kind you point at a problem and get good results delivered. So, coming up with a project that I would find useful was always going to be tricky.</p>
<p>I finally had my Eureka moment when an idea popped into my head. I am an avid news follower; it is part of my daily routine. From watching a large chunk—sometimes all 3-hours—of The Morning Show on Arise TV on YouTube, to browsing different sites to see what is happening in my country and the world at large. I hope you can see where I am going with this. It dawned on me that I could try to collect the front pages of some of the popular newspapers in my country, as quite a number of them have them on display on their website. I could aggregate them and serve them to myself somehow.</p>
<p>I must admit I was quite pleased with myself for coming up with this idea, as it was definitely going to be useful for me, which I have come to agree is really important. This is how <a href="https://github.com/plutack/Newspaper-Frontpage-Aggregator">newspaper frontpage aggregator</a> was born.</p>
<p>Stay tuned for my next post, where I will detail the building process, the challenges I faced, and the solutions I found along the way.</p>
]]></content>
		</item>
		
		<item>
			<title>My Very First Post</title>
			<link>//localhost:1313/en/posts/post-1/</link>
			<pubDate>Sat, 22 Jun 2024 09:50:16 +0100</pubDate>
			
			<guid>//localhost:1313/en/posts/post-1/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h1 id="setting-up-hugo-on-github-pages">Setting Up Hugo on Github pages</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Hello world&#34;</span>);
</span></span></code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
